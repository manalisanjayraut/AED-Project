/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.PatientRole;

import business.EcoSystem;
import business.Lab.Lab;
import business.Organization.LabOrganization;
import business.Organization.Organization;
import business.Patient.Patient;
import business.UserAccount.UserAccount;
import business.WorkQueue.LabTestWorkRequest;
import business.WorkQueue.WorkRequest;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shrey
 */
public class CheckLabResultJPanel extends javax.swing.JPanel {

    private EcoSystem business;
    private final UserAccount userAccount;

    /**
     * Creates new form CheckLabResultJPanel
     */
    public CheckLabResultJPanel(UserAccount account, EcoSystem business) {
        this.business = business;
        this.userAccount = account;

        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkRequests = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblWorkRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "File"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblWorkRequests.setGridColor(new java.awt.Color(255, 255, 255));
        tblWorkRequests.setSelectionBackground(new java.awt.Color(204, 204, 255));
        tblWorkRequests.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblWorkRequestsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblWorkRequests);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 255));
        jLabel2.setText("Check LAB Result");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/labtest2.png"))); // NOI18N
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(681, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 778, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 779, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 302, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 303, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblWorkRequestsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblWorkRequestsMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblWorkRequests.getSelectedRow();
    if (selectedRow >= 0) {
    String filePath = (String) tblWorkRequests.getValueAt(selectedRow, 4); // Assuming file path is in column 4

    // Check if Desktop is supported to open the file
    if (Desktop.isDesktopSupported()) {
        System.out.println("filepath"+filePath);
        File file = new File(filePath);
        if (file.exists()) {
            try {
                Desktop.getDesktop().open(file); // Opens the file using the system's default application
            } catch (IOException e) {
                // Handle the IOException (e.g., file not found or unable to open)
                e.printStackTrace();
            }
        } else {
            // Handle the case where the file does not exist
            System.out.println("File not found.");
        }
    }
    }else {
        JOptionPane.showMessageDialog(null, "Please select a row to view/download the file.");
    }
    }//GEN-LAST:event_tblWorkRequestsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblWorkRequests;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblWorkRequests.getModel();
    model.setRowCount(0);

    Organization labOrg = null;
    for (Organization organization : business.getOrganizationDirectory().getOrganizationList()) {
        if (organization instanceof LabOrganization) {
            labOrg = organization;
            break;
        }
    }

    if (labOrg != null) {
        for (WorkRequest request : labOrg.getWorkQueue().getWorkRequestList()) {
            Patient patient = request.getPatientName();
            if (patient != null && patient.getUsername().equals(userAccount.getUsername())) {
                LabTestWorkRequest labRequest = (LabTestWorkRequest) request;
                Object[] row = new Object[5];
                row[0] = labRequest;
                row[1] = labRequest.getSender().getUsername();
                row[2] = labRequest.getReceiver() == null ? null : labRequest.getReceiver().getUsername();
                row[3] = labRequest.getStatus();
                row[4] = labRequest.getTestResult(); // Display file path or file details here
                
                model.addRow(row);
            }
        }
    }
    }

    // System.out.println("labOrganization.getWorkQueue().getWorkRequestList()" + .getWorkQueue().getWorkRequestList());
}
