/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.PatientRole;

import business.Doctor.Appointment;
import business.Doctor.Doctor;
import business.Doctor.DoctorDirectorty;

import business.Doctor.DoctorPatientMap;
import business.EcoSystem;
import business.Organization.DoctorOrganization;
import business.Organization.Organization;
import business.Patient.Patient;
import business.Person.Person;
import business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import static java.time.Clock.system;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import ui.DoctorRole.RequestPresciption;

/**
 *
 * @author manal
 */
public class ManageDoctorAppointment extends javax.swing.JPanel {

    /**
     * Creates new form ManageDoctorAppointment
     */
    private JPanel workArea;
    private DoctorOrganization organization;
    private EcoSystem business;
    private UserAccount userAccount;
    private Doctor currentDoctor;
    ArrayList<Doctor> docList;

    public ManageDoctorAppointment(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        initComponents();

        this.workArea = userProcessContainer;
        this.business = business;
        this.userAccount = account;

        populateSpecialization();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        timeCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        specializationCombo = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        viewAppointmentButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDocAvail = new javax.swing.JTable();
        bookAppointment = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        container.setBackground(new java.awt.Color(250, 249, 251));
        container.setPreferredSize(new java.awt.Dimension(1160, 750));
        container.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setText("Book Appointment");
        container.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 280, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("SF Pro Text", 0, 16)); // NOI18N
        jLabel2.setText("Date");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 102, -1));

        jLabel3.setFont(new java.awt.Font("SF Pro Text", 0, 16)); // NOI18N
        jLabel3.setText("Time");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 0, 86, 30));

        timeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:00-10:00", "10:00-11:00", "11:00-12:00", "12:00-13:00", "13:00-14:00", "14:00-15:00", "15:00-16:00", "16:00-17:00", "17:00-18:00" }));
        timeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeComboActionPerformed(evt);
            }
        });
        jPanel2.add(timeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 160, 40));

        jLabel4.setFont(new java.awt.Font("SF Pro Text", 0, 16)); // NOI18N
        jLabel4.setText("Specialization");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        specializationCombo.setPreferredSize(new java.awt.Dimension(140, 30));
        specializationCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specializationComboActionPerformed(evt);
            }
        });
        jPanel2.add(specializationCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 80, 36));
        jPanel2.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 160, 36));

        container.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 730, 140));

        viewAppointmentButton.setBackground(new java.awt.Color(255, 55, 95));
        viewAppointmentButton.setFont(new java.awt.Font("SF Pro", 1, 18)); // NOI18N
        viewAppointmentButton.setForeground(new java.awt.Color(255, 255, 255));
        viewAppointmentButton.setText("View Appointment Status");
        viewAppointmentButton.setBorder(null);
        viewAppointmentButton.setFocusPainted(false);
        viewAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAppointmentButtonActionPerformed(evt);
            }
        });
        container.add(viewAppointmentButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, 260, 50));

        tblDocAvail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Specialization", "Hospital", "Phone Number"
            }
        ));
        tblDocAvail.setSelectionBackground(new java.awt.Color(204, 204, 255));
        jScrollPane1.setViewportView(tblDocAvail);

        container.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 730, 140));

        bookAppointment.setBackground(new java.awt.Color(255, 55, 95));
        bookAppointment.setFont(new java.awt.Font("SF Pro", 1, 18)); // NOI18N
        bookAppointment.setForeground(new java.awt.Color(255, 255, 255));
        bookAppointment.setText("Book Appointment");
        bookAppointment.setBorder(null);
        bookAppointment.setFocusPainted(false);
        bookAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointmentActionPerformed(evt);
            }
        });
        container.add(bookAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, 220, 50));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/doctor-3d-icon-illustration-free-png.png"))); // NOI18N
        container.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 170, 370, 320));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(container, javax.swing.GroupLayout.DEFAULT_SIZE, 949, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void specializationComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specializationComboActionPerformed
        // TODO add your handling code here:
        DoctorDisplay();
    }//GEN-LAST:event_specializationComboActionPerformed

    private void viewAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAppointmentButtonActionPerformed
        // TODO add your handling code here:
        // viewAppointmentStatus();
        // displayAppointmentStatus();

        CheckAppointmentStatus caps = new CheckAppointmentStatus(workArea, userAccount, business);

        workArea.add(
                "CheckAppointmentStatus", caps);
        CardLayout layout = (CardLayout) workArea.getLayout();

        layout.show(workArea,
                "CheckAppointmentStatus");


    }//GEN-LAST:event_viewAppointmentButtonActionPerformed

    private void bookAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointmentActionPerformed
        // TODO add your handling code here:

        bookDocAppointment();
    }//GEN-LAST:event_bookAppointmentActionPerformed

    private void timeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookAppointment;
    private javax.swing.JPanel container;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> specializationCombo;
    private javax.swing.JTable tblDocAvail;
    private javax.swing.JComboBox<String> timeCombo;
    private javax.swing.JButton viewAppointmentButton;
    // End of variables declaration//GEN-END:variables

    private void populateSpecialization() {
        //  throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        ArrayList<Organization> list = business.getOrganizationDirectory().getOrganizationList();
        DoctorOrganization docOrg = null;
        for (Organization org : list) {
            if (org instanceof DoctorOrganization) {
                docOrg = (DoctorOrganization) org;
                break;
            }

        }
        //  org.getDoctorDirectory().getDoctorList()
        docList = docOrg.getDoctorDirectory().getDoctorList();
        System.out.println("256");
        int l = docList.size();
        ArrayList<String> specialization = new ArrayList<String>();
        for (int i = 0; i < l; i++) {
            Doctor d1 = docList.get(i);
            if (!specialization.contains(d1.getSpecialization())) {

                specialization.add(d1.getSpecialization());
            }

        }
        for (int i = 0; i < specialization.size(); i++) {
            specializationCombo.addItem(specialization.get(i));
        }

    }

    private void DoctorDisplay() {
        // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        String specialSelect = specializationCombo.getSelectedItem().toString();

        int l = docList.size();

        tblDocAvail.setModel(new DefaultTableModel(null, new String[]{"Name", "Hospital", "Spealization", "Phone Number"}));
        for (int i = 0; i < l; i++) {
            Doctor doc = docList.get(i);
            System.out.println("doctor :" + doc.e.getName() + doc.getSpecialization());
            if (doc.getSpecialization() != null && doc.getSpecialization().matches(specialSelect)) {
                DefaultTableModel table = (DefaultTableModel) tblDocAvail.getModel();
                String content[] = {doc.e.getName(), doc.getSpecialization(), doc.getHospital()};
                table.addRow(content);
            }
        }
    }

    private void bookDocAppointment() {
        DefaultTableModel model = (DefaultTableModel) tblDocAvail.getModel();
        int selectedRow = tblDocAvail.getSelectedRow();

        if (selectedRow >= 0) {
            if (jDateChooser1.getDate() != null) {
                String doctorName = model.getValueAt(selectedRow, 0).toString();
                String specialization = model.getValueAt(selectedRow, 1).toString();
                String hospital = model.getValueAt(selectedRow, 2).toString();
                //   String phoneNumber = model.getValueAt(selectedRow, 3).toString();

                String selectedTime = timeCombo.getSelectedItem().toString();
                SimpleDateFormat sdate = new SimpleDateFormat("yyyy-MM-dd");
                String appDate = sdate.format(jDateChooser1.getDate());
                DateTimeFormatter datetf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                LocalDateTime date2 = LocalDateTime.now();
                if (isAlreadyBooked(doctorName, appDate)) {
                    JOptionPane.showMessageDialog(null, "Appointment already booked for the chosen date.");
                    return;
                }

                LocalDateTime currentDate = LocalDateTime.now();
                if (appDate.compareTo(currentDate.toString()) >= 0) {
                    boolean isAvailable = isVerify(doctorName, appDate, specialization);
                    if (true) {
                        System.out.println("ui.PatientRole.ManageDoctorAppointment.bookDocAppointment()");
                        int randomId = 1 + (int) (Math.random() * 100);

                        // Parse the selectedTime into a LocalTime
                        //  LocalTime localTime = LocalTime.parse(selectedTime);
                        // Parse the appointmentDate into a LocalDate
                        // LocalDate localDate = LocalDate.parse(appointmentDate);
                        // Create an Appointment object with separate attributes for date and time
                        Patient currentPatient = (Patient) userAccount;
                        Appointment appointment = new Appointment(randomId, doctorName, appDate, selectedTime, currentPatient);

                        Doctor doctor = getDoctorByName(doctorName);
                        DoctorPatientMap doctorPatientMap = doctor.getMap();
                        // Access the associated Person (which is the Patient in this case)

                        // Add the patient to the doctor's set of patients
                        doctorPatientMap.addPatientToDoctor(doctor, (Patient) userAccount);

                        // Add the appointment to the doctor's set of appointments
                        doctorPatientMap.addAppointmentToDoctor(doctor, appointment);

                        currentPatient.getAppointments().add(appointment);

                        JOptionPane.showMessageDialog(null, "Your Appointment request is successful!!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Appointment slot not available!!");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please select any future date!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Date is mandatory!!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Doctor you want to book an appointment with!!");
        }
    }

    private boolean isAlreadyBooked(String doctorName, String appointmentDate) {

        Doctor doctor = getDoctorByName(doctorName);
        DoctorPatientMap doctorPatientMap = doctor.getMap();
        Set<Patient> patients = doctorPatientMap.getDoctorPatientMap().get(doctor);
        if (patients != null) {
            for (Patient patient : patients) {

                if (patient != null && patient.hasAppointmentOnDate(appointmentDate)) {
                    System.out.println("ui.PatientRole.ManageDoctorAppointment.isAlreadyBooked()");
                    return true;
                }
            }
        }
        return false;
    }

    private Doctor getDoctorByName(String doctorName) {
        for (Doctor doctor : docList) {
            if (doctor.e.getName().equals(doctorName)) {
                return doctor;
            }
        }
        return null;
    }

// Method to check if a particular doctor is available at a given date and specialization
    public boolean isVerify(String doctorName, String appointmentDate, String specialization) {
        Doctor doctor = getDoctorByName(doctorName);

// Check if the doctor is found
        if (doctor != null) {
            // Check if the doctor's map is not null
            if (doctor.getMap() != null) {
                DoctorPatientMap doctorMap = doctor.getMap();

                // Check if the doctor's appointments map is not null
                if (doctorMap.getDoctorAppointmentsMap() != null) {
                    Set<Appointment> doctorAppointments = doctorMap.getDoctorAppointmentsMap().get(doctor);

                    // Check if the doctor's appointment set is not null
                    if (doctorAppointments != null) {
                        for (Appointment appointment : doctorAppointments) {
                            // Check if the doctor name, date, and specialization match an existing appointment
                            if (appointment.getDoctorName().equals(doctorName)
                                    && appointment.getDate().equals(appointmentDate)) {
                                System.out.println("i am here in appointment");
                                return false; // Doctor is not available at the specified date and time
                            }
                        }
                    }
                }
            }
        }

        return true; // Default to true if any necessary objects are null or not found
    }

    private void cancelAppoint() {
        //  throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody

    }
}
