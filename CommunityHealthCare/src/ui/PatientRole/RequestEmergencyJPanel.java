/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.PatientRole;

import business.EcoSystem;
import business.Emergency.Emergency;
import business.Organization.EmergencyOrganization;
import business.Organization.LabOrganization;
import business.Organization.Organization;
import business.Patient.Patient;
import business.UserAccount.UserAccount;
import business.WorkQueue.LabTestWorkRequest;
import business.WorkQueue.Req_Emergency;
import business.WorkQueue.Req_EmergencyDir;
import business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shrey
 */
public class RequestEmergencyJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RequestEmergencyJPanel
     */
    private EcoSystem business;
    private final UserAccount user;

    public RequestEmergencyJPanel(UserAccount account, EcoSystem business) {
        this.business = business;
        this.user = account;
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmergency = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jTableEmergency.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Emergency Name", "Location", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEmergency.setGridColor(new java.awt.Color(255, 255, 255));
        jTableEmergency.setSelectionBackground(new java.awt.Color(204, 204, 255));
        jScrollPane1.setViewportView(jTableEmergency);
        if (jTableEmergency.getColumnModel().getColumnCount() > 0) {
            jTableEmergency.getColumnModel().getColumn(0).setResizable(false);
        }

        jButton1.setBackground(new java.awt.Color(255, 55, 95));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setText("Request Health Care Emergency :");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ambulance 3d.jpg"))); // NOI18N
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel table = (DefaultTableModel) jTableEmergency.getModel();
        int selectedRowIndex = jTableEmergency.getSelectedRow();

        if (selectedRowIndex != -1) { // Check if a row is selected
            Emergency selectedEmergency = (Emergency) table.getValueAt(selectedRowIndex, 0);
            // Assuming the emergency object is stored in the first column of the table
            String location = table.getValueAt(selectedRowIndex, 1).toString(); // Assuming location is in the second column

            if (selectedEmergency != null) {
                // Perform actions with the selectedEmergency object
                System.out.println("Selected Emergency: " + selectedEmergency.toString());
                System.out.println("Location: " + location);

               
                Req_Emergency request = new Req_Emergency();
                request.setEmergencyID(selectedEmergency);
                request.setUserId(user);
                request.setLocation(location); // Set the location in the request object
                request.setStatus("Processing");
                Organization org = null;
                for (Organization organization : business.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof EmergencyOrganization) {
                        org = organization;
                        break;
                    }
                }
                if (org != null) {
                    Req_EmergencyDir reqEmgDir = org.getReqEmgDir();
                    System.out.println("org is not null");
                    if(reqEmgDir != null){
                    
                    reqEmgDir.addEmergencyUser(request);   //getWorkQueue().getWorkRequestList().add(request);
                    System.out.println("Emergy set in request:************* " + request.getEmergencyID().getEmergencyID() ); //  getLab().getLabName()); // Print the lab name set in the request
   
                    }else{
                        System.out.println("Its nulll*********");
                    }
                }
                    JOptionPane.showMessageDialog(null, "Emergency request sent.");
            
                // ...
            } else {
                JOptionPane.showMessageDialog(null, "No emergency record found in the selected row.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an emergency record.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEmergency;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) jTableEmergency.getModel();

        model.setRowCount(0);
        Organization org = null;
        for (Organization organization : business.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof EmergencyOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getEmployeeDirectory().getEmergencyDirectory();
        }
        EmergencyOrganization labOrg = (EmergencyOrganization) org; // Typecast if necessary

        //List<Lab> labRecords = labOrg.getLabDirectory().getLabList();
        System.out.println("labRecords" + labOrg.getEmergencyDirectory().getEmergencyList());
        for (Emergency emergencyRecords :labOrg.getEmergencyDirectory().getEmergencyList()) {
            System.out.println("labRecords" + emergencyRecords.toString());
            // Emergency p = emg.getPatientName(); // Get the Lab associated with the request
            Object[] row = new Object[4];
            row[0] = emergencyRecords;
            row[1] = emergencyRecords.getEmergencyID();
            row[2] = emergencyRecords.getLocation(); //getEmployee().getName();
            row[3] = emergencyRecords.getPhoneNumber(); //== null ? null : request.getReceiver().getUsername();
           // row[3] = emergencyRecords.

            model.addRow(row);
        }

    }

}
